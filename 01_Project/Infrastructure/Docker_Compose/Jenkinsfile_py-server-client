pipeline {
    agent any

    parameters {
        string(name: 'SOURCE_REPO', defaultValue: 'https://github.com/janushanth/docker_learn.git', description: 'Source repository URL')
        string(name: 'HELM_REPO', defaultValue: 'https://github.com/janushanth/CI-CD_architecture.git', description: 'Helm Chart repository URL')
        string(name: 'CHART_NAME', defaultValue: 'py-server-client', description: 'Name of the Helm chart')
        string(name: 'DOCKER_IMAGE', defaultValue: 'localhost:8083/repository/docker-repo/py-server-app', description: 'Docker image URL')
        string(name: 'DOCKER_IMAGE_CLIENT', defaultValue: 'localhost:8083/repository/docker-repo/py-client-app', description: 'Docker image URL')
        string(name: 'NEXUS_CREDENTIALS', defaultValue: 'nexus-credentials', description: 'Nexus credentials ID')
        string(name: 'NEXUS_DOCKER_URL', defaultValue: 'http://localhost:8083/repository/docker-repo/', description: 'Nexus Docker repository URL')
        string(name: 'NEXUS_HELM_URL', defaultValue: 'http://nexus:8081/repository/helm-repo/', description: 'Nexus Helm repository URL')
        string(name: 'GIT_REPO_URL', defaultValue: 'https://github.com/janushanth/CI-CD_architecture.git', description: 'Git repository URL for Helm charts')
    }

    environment {
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_ID}"
        DOCKER_IMAGE_TAG_CLIENT = "${DOCKER_IMAGE_CLIENT}:${BUILD_ID}"
        OLD_TAG = "${DOCKER_IMAGE}:${BUILD_ID - 1}"
        OLD_TAG_CLIENT = "${DOCKER_IMAGE_CLIENT}:${BUILD_ID - 1}"
        CHART_VERSION = "${BUILD_ID}.0.0"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Clone App Repo') {
            steps {
                git credentialsId: 'github-credentials', url: "${params.SOURCE_REPO}", branch: 'main'
            }
        }

        stage('Build Docker Image Server') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE_TAG}", "py-server-client/server")
                }
            }
        }

        stage('Build Docker Image Client') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE_TAG_CLIENT}", "py-server-client/client")
                }
            }
        }
    

        stage('Login to Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${params.NEXUS_CREDENTIALS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin ${params.NEXUS_DOCKER_URL}"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${DOCKER_IMAGE_TAG}"
            }
        }

        stage('Push Docker Image Cilent') {
            steps {
                sh "docker push ${DOCKER_IMAGE_TAG_CLIENT}"
            }
        }

        stage('Remove Old Tag') {
            steps {
                sh "docker rmi ${OLD_TAG} || true"
            }
        }

        stage('Remove Old Tag Client') {
            steps {
                sh "docker rmi ${OLD_TAG_CLIENT} || true"
            }
        }        

        stage('Clone Helm Chart Repo') {
            steps {
                dir('helm-chart') {
                    git credentialsId: 'github-credentials', url: "${params.HELM_REPO}", branch: 'main'
                }
            }
        }

        stage('Update values.yaml') {
            steps {
                dir('helm-chart') {
                    script {
                        sh """
                            sed -i 's|tag:.*|tag: ${BUILD_ID}|' 01_Project/helm-charts/${CHART_NAME}/values.yaml
                        """
                    }
                }
            }
        }

        stage('Package Helm Chart') {
            steps {
                dir('helm-chart') {
                    sh """
                        helm lint 01_Project/helm-charts/${CHART_NAME}
                        helm package 01_Project/helm-charts/${CHART_NAME} --version ${CHART_VERSION}
                    """
                }
            }
        }

        stage('Push Helm Chart to Nexus') {
            steps {
                dir('helm-chart') {
                    script {
                        withCredentials([usernamePassword(credentialsId: "${params.NEXUS_CREDENTIALS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh """
                                curl -v -u ${USERNAME}:${PASSWORD} --upload-file ${CHART_NAME}-${CHART_VERSION}.tgz ${params.NEXUS_HELM_URL}
                            """
                        }
                    }
                }
            }
        }

        stage('Commit Updated values.yaml') {
            steps {
                dir('helm-chart') {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
                            sh """	
                                git config --global --unset credential.helper || true
                                git remote remove origin || true
                                 
                                # Set the remote URL correctly without any repetition
                                git remote add origin ${params.GIT_REPO_URL}
                                
                                # Add the file changes and commit
                                git add 01_Project/helm-charts/${CHART_NAME}/values.yaml
                                git commit -m "Update image tag to ${BUILD_ID}" || echo "No changes to commit"
                                
                                # Push the changes to the main branch using the token for authentication
                                git push https://janushanth:${TOKEN}@github.com/janushanth/CI-CD_architecture.git HEAD:main                            
                            """
                        }
                    }
                }
            }
        }
    }
}
